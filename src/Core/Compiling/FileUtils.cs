// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml;
using System.Xml.Linq;

using Azure.ApiManagement.PolicyToolkit.Serialization;

namespace Azure.ApiManagement.PolicyToolkit.Compiling;

public static class FileUtils
{
    public static Regex InObjOrBinFolder = new Regex(@".*[\\/](obj|bin)[\\/].*", RegexOptions.Compiled);

    public class Data
    {
        public required XElement Element;
        public required XmlWriterSettings XmlWriterSettings;
        public required bool FormatCode;
        public required string SourceFilePath;
        public required string SourceFolder;
        public required string OutputFilePath;
        public required string OutputFolder;
    }

    public static string WriteToFile(Data data)
    {
        var codeBuilder = new StringBuilder();
        using (var writer = CustomXmlWriter.Create(codeBuilder, data.XmlWriterSettings))
        {
            writer.Write(new XComment(" This file is generated by the Azure API Management Policy Toolkit "));
            writer.Write(new XComment($" Version: {Assembly.GetExecutingAssembly().GetName().Version} "));
            writer.Write(data.Element);
        }

        var xml = codeBuilder.ToString();
        if (data.FormatCode)
        {
            xml = RazorCodeFormatter.Format(xml);
        }

        var fileRelativePath = Path.GetDirectoryName(Path.GetRelativePath(data.SourceFolder, data.SourceFilePath))!;
        var targetFolder = Path.Combine(data.OutputFolder, fileRelativePath);
        var targetFile = Path.Combine(targetFolder, data.OutputFilePath);
        var directoryPath = Path.GetDirectoryName(targetFile);
        if (directoryPath is not null && !Directory.Exists(directoryPath))
        {
            Directory.CreateDirectory(directoryPath);
        }

        File.WriteAllText(targetFile, xml);

        return targetFile;
    }
}