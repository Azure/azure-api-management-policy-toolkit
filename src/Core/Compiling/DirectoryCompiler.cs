// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml.Linq;

using Azure.ApiManagement.PolicyToolkit.Authoring;
using Azure.ApiManagement.PolicyToolkit.Serialization;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Azure.ApiManagement.PolicyToolkit.Compiling;

public partial class DirectoryCompiler
{
    private static readonly IEnumerable<MetadataReference> References =
    [
        MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
        MetadataReference.CreateFromFile(typeof(XElement).Assembly.Location),
        MetadataReference.CreateFromFile(typeof(IDocument).Assembly.Location)
    ];

    private readonly DocumentCompiler _compiler;

    public DirectoryCompiler(DocumentCompiler compiler)
    {
        _compiler = compiler;
    }

    public Task<DirectoryCompilerResult> Compile(DirectoryCompilerOptions options)
    {
        var files = Directory.GetFiles(options.SourceFolder, "*.cs", SearchOption.AllDirectories)
            .Where(p => !InObjectOrBinFolder().IsMatch(p));

        DirectoryCompilerResult result = new();
        foreach (var file in files)
        {
            Console.Out.WriteLine($"File '{file}' Processing");
            var code = File.ReadAllText(file);
            var syntax = CSharpSyntaxTree.ParseText(code, path: file);
            var compilation = CSharpCompilation.Create(
                file,
                syntaxTrees: [syntax],
                references: References);

            var documents = syntax.GetRoot()
                .DescendantNodes()
                .OfType<ClassDeclarationSyntax>()
                .Where(c => c.AttributeLists.ContainsAttributeOfType("Document"));

            foreach (var document in documents)
            {
                IDocumentCompilationResult documentResult = _compiler.Compile(compilation, document);
                result.DocumentResults.Add(documentResult);

                var formatter = new DiagnosticFormatter();
                foreach (var error in documentResult.Diagnostics)
                {
                    Console.Error.WriteLine(formatter.Format(error));
                }

                var codeBuilder = new StringBuilder();
                using (var writer = CustomXmlWriter.Create(codeBuilder, options.XmlWriterSettings))
                {
                    writer.Write(new XComment(" This file is generated by the Azure API Management Policy Toolkit "));
                    writer.Write(new XComment($" Version: {Assembly.GetExecutingAssembly().GetName().Version} "));
                    writer.Write(documentResult.Document);
                }

                var xml = codeBuilder.ToString();
                if (options.CodeFormat)
                {
                    xml = RazorCodeFormatter.Format(xml);
                }

                var policyFileName = document.ExtractDocumentFileName();
                var extension = Path.GetExtension(policyFileName);
                if (string.IsNullOrWhiteSpace(extension))
                {
                    policyFileName = $"{policyFileName}.{options.FileExtension}";
                }

                var fileRelativePath = Path.GetDirectoryName(Path.GetRelativePath(options.SourceFolder, file))!;
                var targetFolder = Path.Combine(options.OutputFolder, fileRelativePath);
                var targetFile = Path.Combine(targetFolder, policyFileName);
                var directoryPath = Path.GetDirectoryName(targetFile);

                if (directoryPath is not null && !Directory.Exists(directoryPath))
                {
                    Directory.CreateDirectory(directoryPath);
                }

                File.WriteAllText(targetFile, xml);
                Console.Out.WriteLine($"File '{targetFile}' created");
            }

            Console.Out.WriteLine($"File '{file}' processed");
        }

        return Task.FromResult(result);
    }

    [GeneratedRegex(@".*[\\/](obj|bin)[\\/].*")]
    private static partial Regex InObjectOrBinFolder();
}