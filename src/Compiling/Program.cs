// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml.Linq;

using Azure.ApiManagement.PolicyToolkit.Compiling;
using Azure.ApiManagement.PolicyToolkit.Serialization;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

var config = new ConfigurationBuilder()
    .AddCommandLine(args)
    .Build();
var options = new CompilerOptions(config);

var files = Directory.GetFiles(options.SourceFolder, "*.cs", SearchOption.AllDirectories)
    .Where(p => !Regex.IsMatch(p, @".*[\\/](obj|bin)[\\/].*"));

ServiceCollection serviceCollection = new();
using ServiceProvider serviceProvider = serviceCollection
    .SetupCompiler()
    .BuildServiceProvider();
CSharpPolicyCompiler compiler = serviceProvider.GetRequiredService<CSharpPolicyCompiler>();

int numberOfErrors = 0;

foreach (var file in files)
{
    Console.Out.WriteLine($"File '{file}' Processing");
    var code = File.ReadAllText(file);
    var syntax = CSharpSyntaxTree.ParseText(code, path: file);

    var documents = syntax.GetRoot()
        .DescendantNodes()
        .OfType<ClassDeclarationSyntax>()
        .Where(c => c.AttributeLists.ContainsAttributeOfType("Document"));
    foreach (var document in documents)
    {
        ICompilationResult result = compiler.Compile(document);

        var formatter = new DiagnosticFormatter();
        numberOfErrors += result.Diagnostics.Count;
        foreach (var error in result.Diagnostics)
        {
            Console.Error.WriteLine(formatter.Format(error));
        }

        var codeBuilder = new StringBuilder();
        using (var writer = CustomXmlWriter.Create(codeBuilder, options.XmlWriterSettings))
        {
            writer.Write(new XComment(" This file is generated by the Azure API Management Policy Toolkit "));
            writer.Write(new XComment($" Version: {Assembly.GetExecutingAssembly().GetName().Version} "));
            writer.Write(result.Document);
        }

        var xml = codeBuilder.ToString();
        if (options.Format)
        {
            xml = RazorCodeFormatter.Format(xml);
        }

        var policyFileName = document.ExtractDocumentFileName();
        var extension = Path.GetExtension(policyFileName);
        if (string.IsNullOrWhiteSpace(extension))
        {
            policyFileName = $"{policyFileName}.{options.FileExtension}";
        }

        var fileRelativePath = Path.GetDirectoryName(Path.GetRelativePath(options.SourceFolder, file))!;
        var targetFolder = Path.Combine(options.OutputFolder, fileRelativePath);
        var targetFile = Path.Combine(targetFolder, policyFileName);
        var directoryPath = Path.GetDirectoryName(targetFile);

        if (directoryPath is not null && !Directory.Exists(directoryPath))
        {
            Directory.CreateDirectory(directoryPath);
        }

        File.WriteAllText(targetFile, xml);
        Console.Out.WriteLine($"File '{targetFile}' created");
    }

    Console.Out.WriteLine($"File '{file}' processed");
}

return numberOfErrors;